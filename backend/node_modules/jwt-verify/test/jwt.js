var httpMocks = require('node-mocks-http');
var nock = require('nock');
var assert = require('assert');
var proxyquire = require('proxyquire');
var chai = require('chai');
var spies = require('chai-spies');
chai.use(spies);

var headerSpy = chai.spy(function (req, headerName, next) {
	next(null, 'JWT TOKEN');
});
var jwt = proxyquire('../lib/jwt', {
	'./header': {
		extract: headerSpy
	}
})

describe('jwt', function () {
	this.timeout(3000);
	describe("check Authorization header", function () {

		beforeEach(function () {
			process.env.JWT_VERIFY_HOST = 'localhost';
			process.env.JWT_VERIFY_PORT = '90';
		});

		it("should extract JWT from Authorization header", function (done) {
			nock('http://localhost:90').post('/jwt/verify').reply(200, {});
			var req = httpMocks.createRequest({
					method: 'POST',
					body: {
						token: 'JWT TOKEN'
					},
					headers: {
						Authorization: '12345'
					}
				}),
				res = httpMocks.createResponse({
					req: req
				});
			jwt(req, res, function (err, result) {
				assert.equal(err, null)
				assert.equal(result, true);
				chai.expect(headerSpy).to.have.been.called();
				done();
			});
		});

		it("should return true if token is valid", function (done) {
			nock('http://localhost:90').post('/jwt/verify').reply(200, {
				token: 'JWT TOKEN'
			});
			var req = httpMocks.createRequest({
					method: 'POST',
					body: {
						token: 'JWT TOKEN'
					},
					headers: {
						Authorization: '12345'
					}
				}),
				res = httpMocks.createResponse({
					req: req
				});
			jwt(req, res, function (err, result) {
				assert.equal(err, null)
				assert.equal(result, true);
				done();
			});

		});

		it("should return false if token is not valid", function (done) {
			nock('http://localhost:90').post('/jwt/verify').reply(400, {});
			var req = httpMocks.createRequest({
					method: 'POST',
					body: {
						token: 'JWT TOKEN'
					},
					headers: {
						Authorization: '12345'
					}
				}),
				res = httpMocks.createResponse({
					req: req
				});
			jwt(req, res, function (err, result) {
				assert.equal(err, null)
				assert.equal(result, false);
				done();
			});

		});
	});
});
